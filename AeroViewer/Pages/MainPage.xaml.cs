using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using AeroViewer.ViewModels;
using AeroViewer.Attributes;
using System.Reflection;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Data;

namespace AeroViewer
{
    public partial class MainPage : Page
    {
        #region Properties
        public Frame ParentFrame { get; set; }
        public DataGrid DataGrid { get; }
        #endregion
        public MainPage(Frame parentFrame)
        {
            InitializeComponent();

            ParentFrame = parentFrame;
            ParentFrame.SizeChanged += OnParentFrameSizeChanged;

            DataGrid = csvDataGrid;
            DataGrid.AutoGeneratedColumns += EditAutoGeneratedColumns<TunnelExitModel>;
            DataGrid.Sorting += SortDataGrid<TunnelExitModel>;

            MainPageModel.UploadDelegate += UploadData;
        }

        /// <summary>
        /// Uploads the data from CSV file to UI and changes the headers of all columns
        /// This method is called when the MainPageModel has changed, through UploadDelegate
        /// </summary>
        public async Task UploadData()
        {
            await Task.Run(async () =>
            {
                await Dispatcher.BeginInvoke(new Action(() =>
                {
                    csvDataGrid.Visibility = Visibility.Visible;

                    DataContext = null;
                    DataContext = MainPageModel.PageModel;
                    MainWindow.Window.Title = MainPageModel.PageModel.FullDocumentName;

                    csvDataGrid.ItemsSource = MainPageModel.PageModel.TunnelsData;
                }));
            });
        }

        #region Columns edition
        /// <summary>
        /// Changes the headers of all columns to headers which were defined in the attributes.
        /// Also makes sets width of a first column (selection column) to 30, and makes the last column
        /// (upload status) readonly
        /// </summary>
        /// <typeparam name="T">ViewModel type</typeparam>
        private void EditAutoGeneratedColumns<T>(object sender, EventArgs e)
            where T : TunnelExitModel
        {
            DataGrid dataGrid = sender as DataGrid;
            PropertyInfo[] properties = typeof(T).GetProperties(BindingFlags.Instance
                | BindingFlags.Public);

            //change width of the selection column (the first one)
            dataGrid.Columns[0].Width = 30;
            //Load status column must be readonly
            dataGrid.Columns[csvDataGrid.Columns.Count - 1].IsReadOnly = true;

            for (int i = 0; i < properties.Length; i++)
            {
                dataGrid.Columns[i].Header =
                    properties[i].GetCustomAttribute<HeaderNameAttribute>().HeaderName;
            }
        }

        /// <summary>
        /// Customly sorts the AdmArea column basing on the amount of distrcits in each AdmArea
        /// </summary>
        /// <typeparam name="T">The data grid model type</typeparam>
        private void SortDataGrid<T>(object sender, DataGridSortingEventArgs e)
            where T : TunnelExitModel
        {
            try
            {
                DataGrid dataGrid = sender as DataGrid;
                DataGridColumn sortedColumn = e.Column;

                if (sortedColumn.Header.ToString() == typeof(T).GetProperty("AdmArea").GetCustomAttribute
                    <HeaderNameAttribute>().HeaderName)
                {
                    e.Handled = true;

                    ListSortDirection sortDirection = (sortedColumn.SortDirection == ListSortDirection.Ascending) ?
                        ListSortDirection.Descending : ListSortDirection.Ascending;
                    sortedColumn.SortDirection = sortDirection;

                    ListCollectionView dataList = (ListCollectionView)CollectionViewSource.
                        GetDefaultView(dataGrid.ItemsSource);

                    dataList.CustomSort = new AdmAreaSort<T>(sortDirection);
                }
            }
            catch (NullReferenceException ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
        }
        #endregion

        #region Event handlers
        private void OnParentFrameSizeChanged(object sender, EventArgs e)
        {
            Width = ParentFrame.Width;
            Height = ParentFrame.Height;

            csvDataGrid.Height = Height - 150;
            outterBorder.Width = Width;
            outterBorder.Height = Height;
            topDevisionRectangle.Width = Width - 2 * topDevisionRectangle.Margin.Left;
        }
        #endregion

        #region Save/Delete/Create/Filter items operations
        private async void UpdateNumberOfVisibleRecords(object sender, EventArgs e)
        {
            try
            {
                Process.SetInitialStatus("Пересчет элементов");
                TextBox itemsCountTextBox = sender as TextBox;
                int visibleItemsCount;

                if (itemsCountTextBox.Text == string.Empty)
                    visibleItemsCount = MainPageModel.PageModel.TunnelsData.Count;
                else
                    visibleItemsCount = int.Parse(itemsCountTextBox.Text);

                if (visibleItemsCount > MainPageModel.PageModel.TunnelsData.Count || visibleItemsCount < 0)
                    throw new IndexOutOfRangeException();

                Process.UpdateStatus("Создание списка");
                ObservableCollection<TunnelExitModel> visibleItems =
                    new ObservableCollection<TunnelExitModel>();
                await Task.Run(() =>
                {
                    for (int i = 0; i < visibleItemsCount; i++)
                        visibleItems.Add(MainPageModel.PageModel.TunnelsData[i]);
                });

                csvDataGrid.ItemsSource = visibleItems;

                Process.SetFinalStatus("Записи отображены", true);
            }
            catch (IndexOutOfRangeException)
            {
                Process.SetFinalStatus("Ошибка отображения", false);
            }
            catch (Exception)
            {
                Process.SetFinalStatus("Ошибка отображения", false);
            }
        }

        private void SaveChanges(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveWindow saveDataWindow = new SaveWindow(csvDataGrid.ItemsSource
                    as ObservableCollection<TunnelExitModel>);

                saveDataWindow.ShowDialog();
            }
            catch (ArgumentException ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex,
                    "Ошибка при вызове диалога сохранения");
            }
            catch (NullReferenceException ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex,
                    "Ошибка при вызове диалога сохранения");
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex,
                    "Ошибка при вызове диалога сохранения");
            }
        }

        /// <summary>
        /// Deletes all selected records from the list
        /// </summary>
        private async void DeleteRecordsAsync(object sender, EventArgs e)
        {
            try
            {
                await Task.Run(async () =>
                {
                    List<TunnelExitModel> selectedItems = GetSelectedItems().ToList();

                    if (selectedItems.Count == 0)
                    {
                        Dispatcher.Invoke(() => AeroViewerMessageBox.ShowMessageBox("Ошибка удаления", "Вы выбрали 0 записей",
                            MessageBoxButton.OK));
                        return;
                    }

                    foreach (TunnelExitModel tunnelExit in selectedItems)
                        await Dispatcher.BeginInvoke(new Action(() =>
                            MainPageModel.PageModel.TunnelsData.Remove(tunnelExit)));

                    await Dispatcher.BeginInvoke(new Action(() =>
                    {
                        csvDataGrid.ItemsSource = MainPageModel.PageModel.TunnelsData;

                        numberOfVisibleRecordsTextBox.Text = string.Empty;
                    }));
                });
            }
            catch (IndexOutOfRangeException ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
        }

        private IEnumerable<TunnelExitModel> GetSelectedItems() =>
           MainPageModel.PageModel.TunnelsData.Where((t) => t.IsSelected == true);

        public void AddNewRecord(object sender, EventArgs e)
        {
            try
            {
                csvDataGrid.Visibility = Visibility.Visible;
                csvDataGrid.ItemsSource = MainPageModel.PageModel.TunnelsData;
                filterTextBox.Text = string.Empty;
                numberOfVisibleRecordsTextBox.Text = string.Empty;

                TunnelExitModel tunnelExitModel = new TunnelExitModel();
                if (MainPageModel.PageModel.TunnelsData.Count != 0)
                {
                    tunnelExitModel.RowNum = MainPageModel.PageModel.TunnelsData[
                        MainPageModel.PageModel.TunnelsData.Count - 1].RowNum + 1;
                }
                tunnelExitModel.IsDamaged = "OK";

                MainPageModel.PageModel.TunnelsData.Add(tunnelExitModel);
                csvDataGrid.ScrollIntoView(tunnelExitModel);
            }
            catch (NullReferenceException ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка");
            }
        }

        #region Filter methods
        /// <summary>
        /// Finds all records which satisfies the given filter condition and updates the UI
        /// in real time
        /// </summary>
        private async void FindAllRecords(object sender, TextChangedEventArgs e)
        {
            try
            {
                PropertyInfo[] propertyInfos = typeof(TunnelExitModel).GetProperties(
                    BindingFlags.Instance | BindingFlags.Public);

                string filterText = filterTextBox.Text;
                int selectionMode = filterComboBox.SelectedIndex;

                await Task.Run(async () =>
                {
                    Process.SetInitialStatus("Поиск записей");

                    ObservableCollection<TunnelExitModel> suitableObjects =
                        GetAllSuitableRecords(selectionMode, propertyInfos, filterText);

                    Process.UpdateStatus("Отображение записей");
                    await Dispatcher.BeginInvoke(new Action(() =>
                        csvDataGrid.ItemsSource = suitableObjects));
                    Process.SetFinalStatus("Записи отображены", true);
                });
            }
            catch (NullReferenceException ex)
            {
                Process.SetFinalStatus("Ошибка при поиске", false);
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка при поиске записей");
            }
            catch (Exception ex)
            {
                Process.SetFinalStatus("Ошибка при поиске", false);
                ExceptionHandler.Handler.HandleExceptionWithMessageBox(ex, "Ошибка при поиске записей");
            }
        }

        private ObservableCollection<TunnelExitModel> GetAllSuitableRecords(
            int selectionMode, PropertyInfo[] propertyInfos, string filterText)
        {
            ObservableCollection<TunnelExitModel> suitableObjects =
                new ObservableCollection<TunnelExitModel>();

            switch (selectionMode)
            {
                case 0:
                    suitableObjects = CreateTunnelExitsList(string.Empty, propertyInfos,
                        filterText);
                    break;
                case 1:
                    suitableObjects = CreateTunnelExitsList("AdmArea", propertyInfos,
                        filterText);
                    break;
                case 2:
                    suitableObjects = CreateTunnelExitsList("TunnelGlobalID", propertyInfos,
                        filterText);
                    break;
            }

            return suitableObjects;
        }

        /// <summary>
        /// Creates an observable collection of TunnelExitModel objects which satisfies the given filter 
        /// condition
        /// </summary>
        private ObservableCollection<TunnelExitModel> CreateTunnelExitsList(
            string selectedProperty, PropertyInfo[] propertyInfos, string filterText)
        {
            ObservableCollection<TunnelExitModel> suitableObjects =
                new ObservableCollection<TunnelExitModel>();

            foreach (TunnelExitModel tunnelExitModel in MainPageModel.PageModel.TunnelsData)
            {
                foreach (PropertyInfo propertyInfo in propertyInfos)
                {
                    if (propertyInfo.GetValue(tunnelExitModel).ToString().IndexOf(filterText) > -1
                        && propertyInfo.GetCustomAttribute<CustomPropertyAttribute>() == null
                        && CheckProperty(selectedProperty, propertyInfo))
                    {
                        suitableObjects.Add(tunnelExitModel);
                        break;
                    }
                }
            }

            return suitableObjects;
        }

        /// <summary>
        /// Checks if the property satisfies current filter conditions
        /// </summary>
        private bool CheckProperty(string selectedProperty, PropertyInfo propertyInfo)
        {
            if (selectedProperty == string.Empty)
                return true;
            if (selectedProperty == propertyInfo.Name)
                return true;
            return false;
        }
        #endregion
        #endregion
    }
}
